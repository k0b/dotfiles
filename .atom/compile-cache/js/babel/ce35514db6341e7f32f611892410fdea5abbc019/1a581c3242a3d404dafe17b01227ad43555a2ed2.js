function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/* eslint-env jasmine */

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsPlus = require('fs-plus');

var _fsPlus2 = _interopRequireDefault(_fsPlus);

'use babel';

describe('gorename', function () {
  _temp2['default'].track();
  var mainModule = null;
  var gorename = null;
  var editor = null;
  var gopath = null;
  var oldGopath = null;
  var source = null;
  var target = null;

  beforeEach(function () {
    runs(function () {
      if (process.env.GOPATH) {
        oldGopath = process.env.GOPATH;
      }
      gopath = _fsPlus2['default'].realpathSync(_temp2['default'].mkdirSync('gopath-'));
      process.env.GOPATH = gopath;
    });

    waitsForPromise(function () {
      return atom.packages.activatePackage('environment').then(function () {
        return atom.packages.activatePackage('go-config');
      }).then(function () {
        return atom.packages.activatePackage('gorename');
      }).then(function (pack) {
        mainModule = pack.mainModule;
        gorename = mainModule.gorename;
        return;
      });
    });

    waitsFor(function () {
      return mainModule.getGoconfig() !== false;
    });
  });

  afterEach(function () {
    if (oldGopath) {
      process.env.GOPATH = oldGopath;
    } else {
      delete process.env.GOPATH;
    }
  });

  describe('when a simple file is open', function () {
    beforeEach(function () {
      runs(function () {
        source = _path2['default'].join(__dirname, 'fixtures', 'basic');
        target = _path2['default'].join(gopath, 'src', 'basic');
        _fsPlus2['default'].copySync(source, target);
      });

      waitsForPromise(function () {
        return atom.workspace.open(_path2['default'].join(target, 'main.go')).then(function (e) {
          editor = e;
          return;
        });
      });
    });

    it('renames a single token', function () {
      editor.setCursorBufferPosition([4, 5]);
      var info = gorename.wordAndOffset(editor);
      expect(info.word).toBe('foo');
      expect(info.offset).toBe(33);

      var file = editor.getBuffer().getPath();
      var cwd = _path2['default'].dirname(file);
      var r = false;
      var cmd = undefined;
      waitsForPromise(function () {
        return mainModule.getGoconfig().locator.findTool('gorename').then(function (c) {
          expect(c).toBeTruthy();
          cmd = c;
        });
      });
      waitsForPromise(function () {
        return gorename.runGorename(file, info.offset, cwd, 'bar', cmd).then(function (result) {
          r = result;
          return;
        });
      });
      runs(function () {
        expect(r).toBeTruthy();
        expect(r.success).toBe(true);
        expect(r.result.stdout.trim()).toBe('Renamed 2 occurrences in 1 file in 1 package.');
        var expected = _fsPlus2['default'].readFileSync(_path2['default'].join(__dirname, 'fixtures', 'basic-expected', 'main.go'), 'utf8');
        var actual = editor.getText();
        expect(actual).toBe(expected);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/james/.atom/packages/gorename/spec/gorename-spec.js

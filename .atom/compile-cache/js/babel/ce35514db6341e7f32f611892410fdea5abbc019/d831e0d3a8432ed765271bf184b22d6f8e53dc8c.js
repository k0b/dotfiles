function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/* eslint-env jasmine */

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var _fsPlus = require('fs-plus');

var _fsPlus2 = _interopRequireDefault(_fsPlus);

'use babel';

describe('tester', function () {
  var mainModule = null;
  var gopath = null;
  var oldGopath = null;

  beforeEach(function () {
    runs(function () {
      if (process.env.GOPATH) {
        oldGopath = process.env.GOPATH;
      }
      gopath = _temp2['default'].mkdirSync();
      process.env.GOPATH = gopath;
      atom.project.setPaths(gopath);
    });

    waitsForPromise(function () {
      return atom.packages.activatePackage('go-config').then(function () {
        return atom.packages.activatePackage('tester-go');
      }).then(function (pack) {
        mainModule = pack.mainModule;
        return atom.packages.activatePackage('language-go');
      });
    });

    waitsFor(function () {
      return mainModule.getGoconfig() !== false;
    });
  });

  afterEach(function () {
    if (oldGopath) {
      process.env.GOPATH = oldGopath;
    } else {
      delete process.env.GOPATH;
    }
  });

  describe('when run coverage on save is disabled', function () {
    var filePath = undefined;
    var testFilePath = undefined;
    var editor = undefined;
    var testEditor = undefined;

    beforeEach(function () {
      atom.config.set('tester-go.runCoverageOnSave', false);
      filePath = _path2['default'].join(gopath, 'src', 'github.com', 'testuser', 'example', 'go-plus.go');
      testFilePath = _path2['default'].join(gopath, 'src', 'github.com', 'testuser', 'example', 'go-plus_test.go');
      _fsPlus2['default'].writeFileSync(filePath, '');
      _fsPlus2['default'].writeFileSync(testFilePath, '');
      waitsForPromise(function () {
        return atom.workspace.open(filePath).then(function (e) {
          editor = e;
        });
      });

      waitsForPromise(function () {
        return atom.workspace.open(testFilePath).then(function (e) {
          testEditor = e;
        });
      });
    });

    it('displays coverage for go source', function () {
      var buffer = editor.getBuffer();
      buffer.setText('package main\n\nimport "fmt"\n\nfunc main()  {\n\tfmt.Println(Hello())\n}\n\nfunc Hello() string {\n\treturn "Hello, 世界"\n}\n');
      buffer.save();
      var testBuffer = testEditor.getBuffer();
      testBuffer.setText('package main\n\nimport "testing"\n\nfunc TestHello(t *testing.T) {\n\tresult := Hello()\n\tif result != "Hello, 世界" {\n\t\tt.Errorf("Expected %s - got %s", "Hello, 世界", result)\n\t}\n}');
      testBuffer.save();
      var p = mainModule.getTester().runCoverage(editor);

      waitsForPromise(function () {
        return p;
      });

      runs(function () {
        var markers = buffer.findMarkers({ 'class': 'gocover' });
        expect(markers).toBeDefined();
        expect(markers.length).toBe(2);
        expect(markers[0]).toBeDefined();
        var range = markers[0].getRange();
        expect(range.start.row).toBe(4);
        expect(range.start.column).toBe(13);
        expect(range.end.row).toBe(6);
        expect(range.end.column).toBe(1);

        expect(markers[1]).toBeDefined();
        range = markers[1].getRange();
        expect(range).toBeDefined();
        expect(range.start.row).toBe(8);
        expect(range.start.column).toBe(20);
        expect(range.end.row).toBe(10);
        expect(range.end.column).toBe(1);
      });
      expect(mainModule).toBeDefined();
      expect(mainModule).toBeTruthy();
      expect(mainModule.getGoconfig).toBeDefined();
      expect(mainModule.consumeGoconfig).toBeDefined();
      expect(mainModule.getGoconfig()).toBeTruthy();
      expect(mainModule.tester).toBeDefined();
      expect(mainModule.tester).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/james/.atom/packages/tester-go/spec/tester-spec.js

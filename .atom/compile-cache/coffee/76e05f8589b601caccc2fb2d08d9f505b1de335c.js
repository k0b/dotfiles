(function() {
  var $, $$, CompositeDisposable, Finder, ToolbarView, View, fs, subAtom, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CompositeDisposable = require('atom').CompositeDisposable;

  _ref = require('atom-space-pen-views'), $ = _ref.$, $$ = _ref.$$, View = _ref.View;

  fs = require('fs');

  _ = require('underscore-plus');

  Finder = require('./finder');

  subAtom = require('sub-atom');

  module.exports = ToolbarView = (function(_super) {
    __extends(ToolbarView, _super);

    function ToolbarView() {
      return ToolbarView.__super__.constructor.apply(this, arguments);
    }

    ToolbarView.content = function() {
      return this.div({
        "class": 'command-toolbar toolbar-horiz'
      }, (function(_this) {
        return function() {
          return _this.div({
            outlet: 'newBtn',
            "class": 'new-btn command-toolbar-btn'
          });
        };
      })(this));
    };

    ToolbarView.prototype.initialize = function(commandToolbar, state) {
      var btn, closeTtEvents, _base, _i, _len, _ref1;
      this.state = state;
      this.subs = new subAtom;
      this.$workspace = $(atom.views.getView(atom.workspace));
      this.updateSide(null, true);
      closeTtEvents = 'mousedown mouseout mouseleave';
      this.subs.add(this, 'mouseover', '.command-toolbar-btn', (function(_this) {
        return function(e) {
          return _this.chkTooltip(e);
        };
      })(this));
      this.subs.add(this, closeTtEvents, '.command-toolbar-btn', (function(_this) {
        return function() {
          return _this.closeTooltip();
        };
      })(this));
      _ref1 = ((_base = this.state).buttons != null ? _base.buttons : _base.buttons = []);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        btn = _ref1[_i];
        this.addBtn.apply(this, btn);
      }
      this.subs.add(this.newBtn, 'click', (function(_this) {
        return function(e) {
          if (e.ctrlKey || e.altKey) {
            _this.addTabBtn();
          } else {
            new Finder().show(function(name) {
              return _this.addBtn(name, name, true);
            });
          }
          return false;
        };
      })(this));
      return this.setupBtnEvents();
    };

    ToolbarView.prototype.saveState = function() {
      var e;
      try {
        return fs.writeFileSync(this.state.statePath, JSON.stringify(this.state));
      } catch (_error) {
        e = _error;
        return console.log('command-toolbar error saving state file:', e.message);
      }
    };

    ToolbarView.prototype.chkTooltip = function(e) {
      var $btn, hgt, newBtn, now, ofs, style, text, wid, winX, winY, workspaceEle;
      now = Date.now();
      if (this.tooltipHoverMS == null) {
        this.tooltipHoverMS = now;
      }
      if (now < this.tooltipHoverMS + 1000) {
        this.tooltipTimeout = setTimeout(((function(_this) {
          return function() {
            return _this.chkTooltip(e);
          };
        })(this)), 50);
        return;
      }
      this.closeTooltip();
      ofs = ($btn = $(e.target)).offset();
      newBtn = $btn.is(':first-child');
      wid = $btn.width() + (newBtn ? 10 : 0);
      hgt = $btn.height();
      workspaceEle = atom.views.getView(atom.workspace);
      winX = workspaceEle.offsetWidth;
      winY = workspaceEle.offsetHeight;
      text = newBtn ? 'Create Button Or Drag Toolbar<br>' + 'Ctrl-Click To Add Current Tab' : $btn.attr('data-cmd');
      style = (function() {
        switch (this.state.side) {
          case 'top':
            return "left:  " + ofs.left + "px;        top:    " + (ofs.top + hgt + 15) + "px";
          case 'right':
            return "right: " + (winX - ofs.left + 5) + "px; top:    " + (ofs.top - 3) + "px";
          case 'bottom':
            return "left:  " + ofs.left + "px;        bottom: " + (winY - ofs.top + 5) + "px";
          case 'left':
            return "left:  " + (ofs.left + wid + 15) + "px; top:    " + (ofs.top - 3) + "px";
        }
      }).call(this);
      this.$tooltip = $("<div class='command-toolbar-tooltip' style='" + style + "'>" + text + "</div>");
      this.$workspace.append(this.$tooltip);
      this.tooltipCloseTimeout = setTimeout(((function(_this) {
        return function() {
          return _this.closeTooltip();
        };
      })(this)), (newBtn ? 4000 : 2000));
      return false;
    };

    ToolbarView.prototype.closeTooltip = function() {
      if (this.tooltipTimeout) {
        clearTimeout(this.tooltipTimeout);
      }
      if (this.tooltipCloseTimeout) {
        clearTimeout(this.tooltipCloseTimeout);
      }
      this.tooltipTimeout = this.tooltipCloseTimeout = this.tooltipHoverMS = null;
      if (this.$tooltip) {
        this.$tooltip.remove();
        return this.$tooltip = null;
      }
    };

    ToolbarView.prototype.updateSide = function(side, refresh) {
      var lftRight, topBottom, _base;
      this.stopEditing();
      if (!side && !refresh) {
        return;
      }
      if (!refresh && side === this.state.side) {
        return;
      }
      if (side) {
        this.state.side = side;
      }
      if ((_base = this.state).side == null) {
        _base.side = 'top';
      }
      this.saveState();
      lftRight = (function(_this) {
        return function() {
          _this.removeClass('toolbar-vert').addClass('toolbar-horiz');
          return _this.find('.btn').css({
            display: 'inline-block'
          });
        };
      })(this);
      topBottom = (function(_this) {
        return function() {
          _this.removeClass('toolbar-horiz').addClass('toolbar-vert');
          return _this.find('.btn').css({
            display: 'block'
          });
        };
      })(this);
      this.detach();
      switch (this.state.side) {
        case 'left':
          topBottom();
          return atom.workspace.addLeftPanel({
            item: this
          });
        case 'right':
          topBottom();
          return atom.workspace.addRightPanel({
            item: this
          });
        case 'bottom':
          lftRight();
          return atom.workspace.addBottomPanel({
            item: this
          });
        default:
          lftRight();
          return atom.workspace.addTopPanel({
            item: this
          });
      }
    };

    ToolbarView.prototype.get$Btn = function(e) {
      return $(e.target).closest('.btn');
    };

    ToolbarView.prototype.addBtn = function(label, cmd, newBtn) {
      var newBtnView, oldLabel;
      this.stopEditing();
      if (newBtn) {
        oldLabel = null;
        this.find('.btn').each(function() {
          var $btn;
          $btn = $(this);
          if ($btn.attr('data-cmd') === cmd) {
            oldLabel = $btn.text();
            atom.confirm({
              message: 'command-toolbar Error:\n',
              detailedMessage: 'The command "' + cmd + '" ' + 'already exists with label "' + oldLabel + '".',
              buttons: ['OK']
            });
            return false;
          }
        });
        if (oldLabel != null) {
          return;
        }
      }
      newBtnView = $$(function() {
        return this.div({
          "class": 'btn native-key-bindings command-toolbar-btn'
        }, label);
      });
      if (newBtn) {
        this.newBtn.after(newBtnView);
      } else {
        this.append(newBtnView);
      }
      this.updateSide(null, true);
      newBtnView.attr('data-cmd', cmd);
      if (newBtn) {
        this.state.buttons.unshift([label, cmd]);
        return this.saveState();
      }
    };

    ToolbarView.prototype.addTabBtn = function() {
      var cmd, editor, _ref1;
      if ((cmd = editor = (_ref1 = atom.workspace.getActivePaneItem()) != null ? typeof _ref1.getPath === "function" ? _ref1.getPath() : void 0 : void 0)) {
        if (!/^https?:\/\//i.test(cmd)) {
          cmd = 'file://' + cmd;
        }
        return this.addBtn(cmd, cmd, true);
      }
    };

    ToolbarView.prototype.startEditing = function(e) {
      var $btn;
      if (this.buttonEditing && this.buttonEditing[0] === e.target) {
        return;
      }
      this.stopDragging();
      this.stopEditing();
      $btn = this.get$Btn(e);
      $btn.attr({
        contenteditable: true
      });
      $btn.css({
        cursor: 'text'
      });
      return this.buttonEditing = $btn;
    };

    ToolbarView.prototype.stopEditing = function() {
      if (!this.buttonEditing) {
        return;
      }
      this.buttonEditing.css({
        cursor: 'pointer'
      });
      this.buttonEditing.attr({
        contenteditable: false
      });
      this.state.buttons[this.buttonEditing.index() - 1][0] = this.buttonEditing.text();
      this.saveState();
      return this.buttonEditing = null;
    };

    ToolbarView.prototype.executeCmd = function(e) {
      var ele, name, options, _ref1;
      if (this.buttonEditing && this.buttonEditing[0] !== e.target) {
        this.stopEditing();
      }
      name = this.get$Btn(e).attr('data-cmd');
      if (/^(https?|file):\/\//i.test(name)) {
        options = (atom.config.get('command-toolbar.useRightPane') ? {
          split: 'right'
        } : {});
        return atom.workspace.open(name.replace(/^file:\/\//, ''), options);
      } else {
        ele = (_ref1 = atom.workspace.getActivePaneItem()) != null ? _ref1 : atom.workspace;
        return atom.commands.dispatch(atom.views.getView(ele), name);
      }
    };

    ToolbarView.prototype.btnClick = function(e) {
      var _ref1;
      if (e.ctrlKey || e.altKey) {
        this.startEditing(e);
        return;
      }
      if (e.target === ((_ref1 = this.buttonEditing) != null ? _ref1[0] : void 0)) {
        return;
      }
      return this.executeCmd(e);
    };

    ToolbarView.prototype.btnKeyDown = function(e) {
      var _ref1;
      if ((_ref1 = e.which) === 9 || _ref1 === 13) {
        this.stopEditing();
        return false;
      }
    };

    ToolbarView.prototype.startDraggingToolbar = function(e) {
      this.initMouseX = e.pageX;
      this.initMouseY = e.pageY;
      this.draggingToolbar = true;
      return this.newBtn.addClass('dragging');
    };

    ToolbarView.prototype.setToolbarPos = function(e) {
      var distSq, distX, distY, gridH, gridW, inMiddleCol, inMiddleRow, side, _ref1, _ref2;
      distX = e.pageX - this.initMouseX;
      distY = e.pageY - this.initMouseY;
      distSq = distX * distX + distY * distY;
      gridW = this.$workspace.width() / 3;
      gridH = this.$workspace.height() / 3;
      inMiddleCol = (gridW < (_ref1 = e.pageX) && _ref1 < gridW * 2);
      inMiddleRow = (gridH < (_ref2 = e.pageY) && _ref2 < gridH * 2);
      side = (function() {
        switch (false) {
          case !(distSq < 3600):
            return this.state.side;
          case !(inMiddleCol && e.pageY < gridH):
            return 'top';
          case !(inMiddleRow && e.pageX > gridW * 2):
            return 'right';
          case !(inMiddleCol && e.pageY > gridH * 2):
            return 'bottom';
          case !(inMiddleRow && e.pageX < gridW):
            return 'left';
        }
      }).call(this);
      return this.updateSide(side);
    };

    ToolbarView.prototype.startDragging = function(e) {
      var $btn;
      $btn = this.get$Btn(e);
      this.initMouseX = e.pageX;
      this.initMouseY = e.pageY;
      this.draggingBtn = $btn;
      this.draggingOrigIdx = $btn.index() - 1;
      return this.draggingBtn.addClass('dragging');
    };

    ToolbarView.prototype.stopDragging = function(del) {
      this.draggingToolbar = false;
      this.newBtn.removeClass('dragging');
      if (!this.draggingBtn) {
        return;
      }
      if (del) {
        this.state.buttons.splice(this.draggingBtn.index() - 1, 1);
        this.draggingBtn.remove();
        this.saveState();
      } else {
        this.draggingBtn.removeClass('dragging');
      }
      this.draggingBtn = null;
      return false;
    };

    ToolbarView.prototype.newBtnMouseDown = function(e) {
      if (this.buttonEditing) {
        this.stopEditing();
      }
      this.startDraggingToolbar(e);
      return false;
    };

    ToolbarView.prototype.btnMousedown = function(e) {
      if (this.buttonEditing || e.ctrlKey) {
        return;
      }
      if (this.buttonEditing) {
        return;
      }
      this.startDragging(e);
      return false;
    };

    ToolbarView.prototype.chkDelete = function(init, initOrth, pos, posOrth) {
      if (!((initOrth - 60 < posOrth && posOrth < initOrth + 60))) {
        this.stopDragging(true);
        return true;
      }
    };

    ToolbarView.prototype.chkRearrange = function(init, initOrth, pos, posOrth) {
      var $btns, buttons, curIdx, dist, dstIdx, newIdx, numBtns, ofs, srcIdx, _ref1;
      ofs = pos - init;
      dist = Math.floor(Math.abs(ofs) / ((_ref1 = this.state.side) === 'left' || _ref1 === 'right' ? 5 : 20));
      if (dist & 1) {
        return;
      }
      dist /= 2;
      numBtns = this.state.buttons.length;
      newIdx = this.draggingOrigIdx + (ofs < 0 ? -dist : dist);
      newIdx = Math.max(0, Math.min(numBtns - 1, newIdx));
      curIdx = this.draggingBtn.index() - 1;
      if (newIdx === curIdx) {
        return;
      }
      $btns = this.find('.btn').remove();
      srcIdx = dstIdx = 0;
      while (dstIdx < numBtns) {
        switch (false) {
          case dstIdx !== newIdx:
            this.append($btns.eq(curIdx));
            dstIdx++;
            break;
          case srcIdx === curIdx:
            this.append($btns.eq(srcIdx++));
            dstIdx++;
            break;
          default:
            srcIdx++;
        }
      }
      buttons = this.state.buttons = [];
      this.find('.btn').each(function() {
        var $btn;
        $btn = $(this);
        return buttons.push([$btn.text(), $btn.attr('data-cmd')]);
      });
      return this.saveState();
    };

    ToolbarView.prototype.mousemove = function(e) {
      var posArr, _ref1;
      if (!this.draggingBtn && !this.draggingToolbar) {
        return;
      }
      if (this.buttonEditing || (e.which & 1) === 0) {
        this.stopDragging();
        return;
      }
      if (this.draggingToolbar) {
        this.setToolbarPos(e);
      } else {
        posArr = ((_ref1 = this.state.side) === 'top' || _ref1 === 'bottom' ? [this.initMouseX, this.initMouseY, e.pageX, e.pageY] : [this.initMouseY, this.initMouseX, e.pageY, e.pageX]);
        if (!this.chkDelete.apply(this, posArr)) {
          this.chkRearrange.apply(this, posArr);
        }
      }
      return false;
    };

    ToolbarView.prototype.setupBtnEvents = function() {
      var $body;
      $body = $('body');
      this.subs.add($body, '[contenteditable]', (function(_this) {
        return function() {
          return _this.stopEditing();
        };
      })(this));
      this.subs.add($body, 'mouseup', (function(_this) {
        return function() {
          return _this.stopDragging();
        };
      })(this));
      this.subs.add($body, 'mousemove', (function(_this) {
        return function(e) {
          return _this.mousemove(e);
        };
      })(this));
      this.subs.add(this, 'mousedown', '.new-btn', (function(_this) {
        return function(e) {
          return _this.newBtnMouseDown(e);
        };
      })(this));
      this.subs.add(this, 'mousedown', '.btn', (function(_this) {
        return function(e) {
          return _this.btnMousedown(e);
        };
      })(this));
      this.subs.add(this, 'keydown', '.btn', (function(_this) {
        return function(e) {
          return _this.btnKeyDown(e);
        };
      })(this));
      return this.subs.add(this, 'click', '.btn', (function(_this) {
        return function(e) {
          return _this.btnClick(e);
        };
      })(this));
    };

    ToolbarView.prototype.destroy = function() {
      this.subs.dispose();
      return this.detach();
    };

    return ToolbarView;

  })(View);

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/Users/james/.atom/packages/command-toolbar/lib/toolbar-view.coffee
